Dr. Allison:	Doug, at the Center for the Augmentation of Human Intellect at SRI in the 1960's was the originator, or that group originated a good deal of what we think of as the mouse based interface. He's going to be talking about the Augment system which is an extension of the work done at SRI at McDonnell Douglas. Doug? [inaudible 00:00:36]

Doug:	[inaudible 00:00:44] I'm going to show some slides and then actually try to show you some of the way Augment works, some of the unique innards of it that have been there for years and it's hard to read about, to learn much. I'm trying to show it to you and the arrangement is quite nice except the resolution of the camera coming down on the tubes won't quite let it be readable if it looks at the whole screen so we're going to work at trying to [inaudible 00:01:16] part of the screen so that the part we use, the window we use will be more readable. But when it's doing that I'm going to have to do some very awkward things in order to know where I'm flying. It's going to be a mutual adventure.

	There are quite a few different things we invented and built through the years, in the pursuit of it I'll explain a little bit on some of the slides, but heavily document oriented in its application focus and there' a strong reason for that within what I was trying to do to support knowledge workers in a very special way. In the last ten years I've been out in the commercial world and then went, McDonnell Douglas bought Tymshare which had bought my laboratory from SRI in a very unprecedented move. When McDonnell Douglas bought Tymshare and we were way off in some corner, and contrary to the rumor, they didn't buy it because of us.

	I got a chance to roam through the airspace side and very much interested in their big systems and the problems I assumed they'd be facing and trying to integrate them and introduce the integrated documents and exchange and uniform interfaces through all of that. I met a colleague there, [inaudible 00:02:46] Carter who just happened to be in town or going by, that there's a lot going on in the news in those big organizations in which these things I'll show you are bound to play a role in the future. Some implementation of this sort along with a lot of integrated architecture which you don't get the picture of what's coming when you see all the exciting things happening in the personal computer world. But there's a lot coming. I'll try to give you a glimpse of that.

	[inaudible 00:03:16] technology here. We'll start with some slides. I'm supposed to get an optical pointer here, which would help. Otherwise I'll walk over here. This a report, published at SRI in 1962, that was after I'd been on this kick for eleven years, believe it or not and gotten a few years to put this together and I said, "Well, I really feel like interactive computers are going to make a huge, huge difference in the capability of what now you'd call the knowledge worker." Then I called it, sort of, augmenting the human intellect and there's a great deal in that framework that still sparks me on and most of the things we did came right out of it. We'll give a little bit of a preliminary description of that, very brief, so that'll orient you why I did it. There was a chapter in a book in 1963 that was included. It created a great wave of enthusiasm out in the world. The one response I got was somebody six months later asking me how you felt this acronym, H dash L-A-M slash P? I used it always, too, to represent my systems and it was stunning when he asked me that because I'd been working by myself all through these years to do this and I never tried to come out with it.

	Here's a little bit of the graphic. [inaudible 00:04:51] This is a kind of simplified graphic to explain why [inaudible 00:05:02] I said, "I want to make the capability of humans much more effective and how do I start thinking?" As an engineer I said, "Well let's do this." This is what you begin with and these are a simplified model of how a human being has to face the world. You've got the model of perceptual machinery, motor machinery, quite a bit of mental machinery. Some of it he's conscious of and a lot he isn't. That's what he's equipped with to face the outside world. You realize that unless you add quite a big more to that, anybody's got that same thing, but what do you have to equip yourself to be capable of coping with the world?

	All right. In these general areas you need to provide more things. Generally most of that's provided by your culture as you grow up. You get inculcated with a lot of unconscious sort of attitudes and customs and things, you just assume the way things will get done. You soak up linguistic things in here and conceptual, and lots of explicit, symbolic, and linguistic, and things that are quite constant that you absorb. A lot of unconsciously accepted and perhaps unconsciously pursued skills, perceptual motor, and all of that is generally there so you can handle stuff out here that your culture provides you in order to cope with the world. So you say, "Yeah."

	There's a great deal already provided that augments the basic human so he can be capable out in the world. I started saying well let me just this that and pretty soon I'd realized there's been a fabulous amount of invention over all the generations. You're just overwhelmed. You're thinking, oh, you come along some bright-eyed jerk and he says, "I've got all this computer stuff I think would be applicable" and you realize there's been so much invention in the future and I almost quite. Then I got to thinking, "Well, let's get a little more into this" and you realize you toggle one set of those augmentation systems things that your technology can provide you with tools. These are just sort of representative kinds of things that would list in that. And another set of things that aren't technology. These things the culture provides you and they generally match what you have here in order to give you capability. You have to have skills and knowledge that you're trained in in order to cope with all of these things. It came to be something like this.

	By the time a human was capable of something significant it really drew on all kinds of skills and knowledge developed in here that coordinated with what's provided here and here by his culture. That's what makes us capable. Without a system like this we're essentially helpless. You say, all right, technology can come here and do something quite significant and make a difference. Well, people start talking about automation. This is so you were going to use tools over here to automate what you're doing here now. But if your tools are radical enough over there the concept that just swept me off my feet was, wow, there's so much change you can do in here in order better to harness something really significant coming out over here. It's a real advantage in human capability wouldn't come and tell, you really got to balance development over here of the new means of thinking and working and even new linguistics, very deep linguistics sorts of things, concepts and portrayals and even the syntax that you use in your head as you work and think, will change a great deal. So that, to me, was what Augmentation was, and to start pursuing that the strategy, well, start building things here which make a difference and sort of bootstrap your way up. Learn, make the changes here.

	At the very outset in '62 when I finally got that put together the idea was, look for the changes here. That's what we've done and there've been aspects about this which grew into serious architectural things, too which I'll deal with very lightly before I go into some of the document sort of things. And that is if you want this to start changing and this to start changing they have to be sort of a coordinated co-evolution. You can't come up with a bunch of vendors and bright-eyed engineers and programmers, if you'll pardon the expression, that are going to produce new things that are going to tweak the world because over here there's a whole bunch of ways of changing that you can change and deal with your work that make a lot of difference in what you want to produce here. They really depend upon each other so it just should co-evolve. How do you get that going? How do you get some of the new dimensions of change over here started? That's what I was looking for, some of the new dimensions.

	In the older ones where it had a little bit about linguistic ways, the way, what's the role of a document and what's the opportunity inside a computer to deal with documents? You can say, all right, one and the same, this is very much a model of what kind of currently is the primary thing to do with computers and documents is, you write, manipulate in computer storage and look at it and you've got page, pages and [inaudible 00:10:26] picture of what you see is what you're going to get because the objective is to print something out and deal with it. I just didn't for a minute stop there. This was never even in my picture, or, made it work for ten minutes and so on out. Here's more what the system in the '60s objective was. I'll go through these different things with some slides and demonstrations to kind of make them more real. The idea is that the tools and language and new methods for the human give you these new kinds of things and that you want open-ended vocabulary because the functionality is found and has evolved indefinitely, in my mind. If you've got a strong powerful beast in this computer doing for you what you want to get done you don't want to control it with very old-fashioned techniques like just a keyboard. It'd be like getting in a 300 horsepower high performance car and kicking up the range and saying, "Get up." It just isn't appropriate to keep hanging on there. What you want for a fast kind of control that the people want to get the real power out of that can evolve to.

	Then you want to do writing and structuring and both content and structure, the idea was to take the conceptual, symbolic structures that are in your mind and over here make a map of them that's the best representation you can that serves your purpose for what you'd like to do and are externally manipulable symbol record of what you're dealing with that represents your thoughts and concepts.

	Right away you can start thinking about putting structure in there that helps you work with relationships between your concepts. I just really began to say a hierarchy is a pretty good one, maybe I'd rather have reentrant lists and all of that. We'll just start with simple hierarchy. In a couple years when we've learned a lot we'll move on to something else. Lot of evolutionary things didn't work as fast as I had assumed. Then the thing about the objects in your file want to be named and addressed because that gives you a lot more power for moving around in them. All that was built into here and it provides remote jumps and manipulation, it's very flexible and a strong focus on moving the positions in the file that you wanted to and when you get there you have a view generated for you that's what you need at the moment.

	The model of that sort of was you conceptually move your head to some topic. You also unconsciously pick a level of conceptualization on that topic. You probably don't go way down at the detail unless there's some very specific little piece of the assembly language code or something you want to deal with. Your mind just goes to a level. Why not give us the same capability in moving around there of having views that suit us at the moment? Which is strongly different from saying, "I'm going to think of it as pages, and what you see is what you're going to get on paper and that's great." No, here it says [inaudible 00:13:28] if you're going to print out, great. Then you'd like to see what you're going to get but while you're composing and studying and modifying and sharing you look at what, make it so that it benefits that and find your display that the human perceptual mechanism watches that and the motor mechanism controls all of these things to fly. That's the model that we built our systems and I'm going to probably demonstrate a bunch of those.

	First some slides to give us some idea about some of these two things. The open-ended vocabulary and the fast, concurrent control. We are very lucky to be part of the planning for the ARPANET from the very first time the idea of ARPANET was broached to the principle investigators of which I was one. In the original ideas we'd have a network, it would link just the, roughly thirteen computer systems, all of which were doing research for ARPA. No thought about linking to other people. In that sense, because it related so much what I wanted to do, I volunteered the day we were told about that to start and learn the network information centers. By the time we got it organized and got going the networks began to work in 1970, they began to add all kinds of other DOD users on there because they wanted the political support to help keep Congress from wiping out that network R and D program. Not realizing yet what a tremendously significant thing that network experiment turned out to be.

	Anyways, soon there were so many people on that network that the grand and glorious things I was going to do with support for small community just couldn't be supported for all of them. That was too bad. Anyway, one of the things we came out with was this feeling on the future about the architecture's going to look like this and this picture stems from early '70s. [inaudible 00:15:21] had that idea that whatever you had here for a workstation may couple with a network of networks and gateways and that anyone who is at a workstation, it isn't connected, it's like he's got an office without a door. I just could not imagine. What you want is an architecture that assumes you don't have homogeneous software and hardware out there because that's a terrible way, that's a sure way to kill evolution is to try to have a one-ended [inaudible 00:15:53] system, when you're talking about a sizable thing out there.

	If you've got application programming and data in your workstation, good. But whether it's out here in a local network or farther out in a private network or out in the public network your interface shouldn't be that worried about it. We actually built an independent user interface system work module that's been in there for twelve years now, that has a virtual terminal controller for the application program to kind of deal with a virtual terminal and there's a lot evolving nowadays that sort of fits that model. The command language interpreter that you can put a grammar attached to very quickly swapped this and it changes the whole nature of whatever interface language you want and it makes calls out to, remote procedure calls out to whatever back end you're working with. Procedure call interface there. User profile that makes the command recognition in whatever special things the user wants come in with that user and the terminal characteristics tell a virtual terminal controller how to deal with that kind of terminal.

	The idea is your actual terminal hardware, the keyboard and the things you actuate and see, is what you call a terminal, and if you've got lots of [inaudible 00:17:08] there let's put it out in the other side of what you think is a virtual bus. User interface systems sort of, interface in there and you can couple with things. An important part of what you're going to connect with is what you think of as your own, local work place that's just like your office. You have a place to sit down and you're thinking and working and mail interaction, preparing documents, things of that sort in your local workplace. The other things are sort of outside and the idea of reaching through to those in ways which has a compatible command language with what you're used to, so that's a translator in there for helping you interface with all those to something consistent. Each class of user with its class of terminals can sort of look into that workshop, knowledge workshop area, and extract a profile of functions and have that sort of conceptually oriented command language and command system that you like.

	We were building that and in the commercial world we got just into ten years ago, the customers didn't know what they wanted to have in this. They didn't want to pay for it, the people who are supporting us certainly weren't going to pay for it being done. Now in the big, heavy industrial world, just the kind of a thing they need to note a lot of movement potential thing to emerge. But within that thing that, heavy orientation about a document in this world is what is important right now to think about. That's still there. I worked through that list with you before and the notion we had very strongly was collaboration was a very important thing and one of them we wanted to be able to do right form the outset is share your screen with somebody at a distance so that you could actually call them up and collaborate. An architecture that's built in, too. We were going to give a demonstration of that today where I'd call up somebody and watch them turn on something and then go we'd see his screen and talk to him. It just go to be too much to try to put together. I'll be lucky if the rest of it works for me.

	This is what pioneering was like all the time. Okay. This is one of my most successful experiments. But I'm going to start now on a little bit of thing about why does speed and flexibility pay off? I kept in the early '60s trying to say, "Why? If you delete it, move it, change it right in front of you and get on with your things why it'd be worth absorbing a computer's attention?" One day I thought of this so I'd give people that brick and say begin to write. It's so clumsy and slow and fatiguing and you realize that it's just a matter of happenstance that the scale of our muscular and control systems and the tools we could build to write with let us write as adroitly as we can. What if it had been difficult relatively? It would have changed our whole culture and our whole way of thinking and our language [inaudible 00:20:14]. So I say all right, does that help you think about going the other way? All right. Anyway, the speed and flexibility which you can have your slate of tools do what you want them is an important aspect to the design. So I push this button and the slide doesn't advance.

	Among the things then, this is a picture of the very first mouse we made with, hand-carved, these two wheels right on the bare tabletop without any apology for not having a ball in between them and they worked beautifully for many years. We did a series of tests, we were looking for what's the best way to control and screen and control selection on a screen. We were getting an array of different kinds of devices and I dug into some of my old notes and there was this idea that turned out to be a mouse. We just build it to add it to the array of things we were going to test. In the tests we had different ways for weighting things for selection penalty and time and all of that to come up with different grades of goodness. The mouse kept winning. Then for so many months we would see if any one of those devices are tied to the system and people would sit down and could use whichever one they wanted and nobody used any but the mouse so then we went with the mouse.

	Nobody remembers who named, who thought up the name of the mouse. Everyone would have thought that it was all going to arrive out in the world much sooner than it did and no one would have thought that when it arrived in the world it would still be carrying the name mouse. Such an undignified name. This is one of the things that just, that changed but, that's a knee, and we got the most photogenic knee. The rest of her is more photogenic I think. I got to thinking about what else could you use and I tried a skate mouse, getting a board and tying it to my seat and moving it around, which you don't have very good control that way. Then I realized that when you're driving a car and working the accelerator you have very, very fine control you've learned on that. Okay, so I have a pedal, and then I want to go sideways, I'll swing my knee sideways and push my foot up and down, oh well if I push my foot up and down on the floor then my knee goes up and down so why not just make something that your knee goes up and down and your cursor goes up and down. Your knee swings side to side and this swings side to side and you can keep your hands on the keyboard. It worked beautifully except you had to stay posturely the same and my knee cramped.

	I made another one that I put on my head and I moved my head around, it would move the cursor and your eyes can stay looking and it looks a little strange but for the sake of experimenting you really do all sorts of things. But then my neck got cramped. Any of those things is likely to come along some other time now and replace the mouse and I'm just assuming that that's going to happen.

	This is something we also made that the left hand uses and I have one here and I'm going to be using it and I'll show you in detail how it works. Because somehow the world can't believe that it's actually easy to learn and that it just accelerates your interaction speed. Somehow the mouse barely made it past those who said that's too hard to learn and in fact it got crippled by people putting one button on it. I'm pretty sure that that's going to give way one day. Other things, too, that are built very naturally when products have come out to the marketplace, built to sell, and when you're selling into an unseasoned market the things that attract people are very different that will attract them years later when they're really seasoned and what they know what they want, and they want performance, and by then realize how much they've actually had to learn to use this thing that was advertised and is so easy to learn and actually use. If you add up the things that you have learn to fly any of those systems it's a lot.

	The idea is saying, all right, let's learn a little more. Think a very simple code, and the computer samples and notes whenever a key goes down, and it notes how many keys, which keys went down before they're all up next time and said that's a chord, looks up in the table and sends that to the machine instead of any character you want to hit. The application system doesn't know that the characters come from your key set or you keyboard. It's purely to use as an option with one hand while the other hand is pointing.

	This is kind of the philosophy of looking at some new sort of thing you're going to learn and hope it'll boost your capability, that there's a period in which it's costing you, you're below the expected performance and you begin to get payoff from here on out. The cost of this learning business is amortizable over however long you're getting payoff, but most people sort of feel like, boy if you haven't gotten paid off within the first hour, not thinking that you as knowledge workers, for instance, are likely to spend thousands of hours, maybe average a thousand hours a year, in your professional lives, sitting there working on it. So the time you can invest is really quite high if you've got just a long payoff time coming back. This is just thinking ahead and our orientation was to look at how much value you could derive from this system and we assumed that when you learned about the value then you could figure out how to minimize the cost for getting into the value, but if you didn't know what you were going why start out with a priori assumptions about how much of a learning skill, the learning prize should be.

	Here's an example. How many people do you see all geared up like this to run around in the world as compared to this? Yet this is obviously, you can go into a showroom and get on that and run it immediately. It's very much easier to learn a natural, so it's a very superior design. But you couldn't sell them to today's seasoned world that have learned a lot of refinements about how it is that you could really design a machine and learn to do it. Learning to ride one of these things is extremely unnatural and one of the reasons it's hard is because nobody understands what you do when you ride a bicycle and they tell everybody who's learning exactly the wrong things about what they should do, and then their body learns somehow anyway. Anyway, that's [inaudible 00:27:05]

	Back to here. Now I'm going to have to switch over and start learning right here. One other thing, is not a very good slide, of the way our files are structured. There's actually a ring structure made of modules of six sides of beta elements that's in a link, a list structure here, with pointers in them that detects objects and a further depth of pointers if you wanted to walk through any other kind of attributes. Value, structure, that you want to put in there so that you could embed graphics or any other kind of objects within the whole and closed thing that the user thinks of as a document and then enclose graphics as you wish but also digitize feature of the things. We'd assume the document of the future was going to be like that so we built the generalized structure to go with it.

	Okay, ready for the slide. Now, I can't remember ... We can't have the overheads I guess, because it'll wash this out. Right? I'd rather work in the dark and I have a better excuse. I could even hide under the table and maybe ... Can you still put that on the screen? Do you have a slide?

Dr. Allison:	[inaudible 00:28:25]

Doug:	One thing that I'm going to have to do sometimes is-

Dr. Allison:	[inaudible 00:28:31]

Doug:	Can you dim it even more? Yeah. That's better for me. Once in a while I'm going to have to look at this image. The thing that we found out the other day when I came over to sort of check this out was that the chalk gets all over the chairs. The other thing I found out is that you're not going to be able to see the full screen and sometimes, unless I'm going to want you to see what's happening with enough detail.

	First I'll just show you that what you're looking at is a port and I'm not sure you can see the little cursor right in the middle of the right hand window.

Student:	Yep.

Doug:	Like that. Okay, when that cursor bumps into the edge of what you call the port it's going to, see it moves the whole thing. Actually there's about four times as much display area there. I just put some things up in these corners here, up in the top of the upper left quadrant of all of that. I work that way all the time and our virtual terminal just tells the host at the other end of the network that [inaudible 00:29:51] terminal and locally it just takes care of it this way. Breaking a window, I'm doing this for a purpose because I can flip to different areas of that to show you different things if I can remember when to go to which area. It's not the usual way I give a demonstration to realize that what I want to do is move the camera now over into this upper left hand quadrant, to move down and let, so you can read it. You can go, well, yeah, that's probably a good start. If you move your camera a little bit over so you include as much of this, yeah. Not quite that much. Great. All right.

	I'll use this window full of text to do several things. One is to kind of show you the way the command things work, introduce the key set, show you the verb noun thing, and some of the ways this stuff works together before I go on to the structuring. I've been so gabby because all kinds of glorious things I'm going to not be able to show you. All right. We've all pretty soon went through people's ideas about menus. It just wouldn't hold up for moving fast. All kinds of special function keys and, wait a minute, that's not evolvable enough. The natural language has its verbs and nouns for a purpose, it's evolvable. So what do you say we work on a verb-noun basis and put the [inaudible 00:31:35] and recognizing them so you minimize how much you have to do to specify what verbs and nouns you want to employ. And why do you employ nouns? We'll show you. But first it is that I just hit, oh, I thought it had broken down in my absence and I thought that'd be very typical.

	All right. We could have said we'd like to pick the object first and then go pick the action which is the way the Macintosh and other interfaces do and sure, you can sort of go either way you like. Pick the action first and then the object or the other way around and it happens that English speaking people are used to saying, "I want to delete a word" rather than "That word, please delete." If you are German you may want to do it the other way around. We just said, all right, let's do it this way. There's some reasons too about the coordination that works very well but in the end you can swap them and see how it really works.

	One character said delete and the other character said what kind of object you wanted to delete. By naming the kind of object you really reduce how much labor it is to specify it. I can come in and select any place in that word with a click and now I am through with the cursor, and go on. I've got an audit up in the top that says, "I want to delete a word app" and the exclamation point says, "You did a select over there. All right, do it." And then you're talking machines sort of a syntactic issue about what it is as a word.

	If you get new objects in there you want, a balance, parentheses or sentences, or questions in computer language and code them in very simply there's a place to do that and it'll add them to the command language [inaudible 00:33:23] you've gone extend like that. When I say, "Delete that." I wonder why it's going to take all day. It does. That's what we had before, take away and it always orients itself, of course and we never, always done automatic line adjust, in fact our statements, just an example of a statement, are just [inaudible 00:33:44] unless they're significant in it.. I could also say delete a character and pick a character, pick something like, sometimes I can't see that cursor there. [inaudible 00:34:00] If I wanted to put it back I would say insert character and hit the key and hit the F and then say do it.

	All right. Anyway when I hunt around on the keyboard I am a little bit clumsy. I'll show you very soon now. Two other things to say. If I want to delete a word and I say, oh, I missed that, one back space character undoes the last thing you did, so I can say delete character, and hit a C. Then if I go pick the wrong object and picked the key and meant to pick the other one I hit the backspace character and it undoes that and I can do what I want to. It's a very nice command language interpreter. It's got all the back up, very clean, and you get the audit up above of what you want to do. When you get a more complex vocabulary command it's just handy to have the feedback. It'd be very interesting then to merge this with some of the other styles where it happens right in place. I got no objection to that. All right, now what if you want to d the combination? There. Sorry about that. There you are.

	See how it works together. If I wanted to delete a word I'd hit D and W with my left hand and I'd pick the word and execute it. I want to insert a new one right there so I'd say insert word and A and D and then it does that. And I'm all done. I want to move a word I'd say move that word, provide the follow 4. And it does and I don't cut and paste because I like the verb move and I'm telling what object to move so it knows how to do it when it goes in there. If I say copy this word what do you think aught to happen when it says copy that word? Well, we'll just try it and see. It copies all the [inaudible 00:36:02]. What comes across is that [inaudible 00:36:04] verbs.

	You'd say, well that's funny, what if I wanted the whole thing? We call that a visible, copy visible, and then other noun types, and you see if I copy that over there it brings the other extension. It wasn't long before you start thinking of different kind of objects as long as you're picking them. It really supports more of what you're doing in there. There's another object in there that if I looked at that right and I'd say, "What is all this here?" What do I care? Call it an invisible. Replace that invisible in there to one space. It's just a screen of non-printed characters and boom. You can copy, delete, replace, move invisible. In fact you just replace all that very quickly.

	Anyway, the combination of these things allowing you not to have to take your eyes off the screen for much of what you're doing when you're doing your editing in short literals you just start flying and when you have to take that away and move the keyboard and the mouse I'll work on a Lisa or a Macintosh and my left arm just starts aching because it's just sitting there unemployed. It's a little better, these control character things you can do but it's just nothing like that.

	Okay, so much for command language and just the way the combination things work and I can go over here and say I want to go to the next thing on there. I'm employing something I will teach you about a little later. Okay. We'll leave a screen size put down on that just for a little bit more so you're sure you can be able to see what's on the screen. Here are terms that you saw on that last slide. Open ended vocabulary, fast concurrent control. I'd say all right, in order to, let me just show you what I actually had there. This way without any structure and this is the way it actually was structured so I'd say all right, I'm going to show it with a structure. You see computer storage and file position are now categories and these other things being underneath it. I'd say that's nice, I like the structure. In fact if I wanted to I can say, well, show me a little more explicitly the structure and then it'll actually show you what we call the location numbers in there and those are plain to sort of see a little more. If you said, well I'm going to move that one to follow that one down a level you'd see its name, its location would be 3D1. Whereas when it's up at this other level it's 3D, 3C.

	I don't think there's any strong explanation needed for what the structure naming is in there. There's a nice thing about saying because I'm dealing with structure now I got a term called move, what if I say move branch? I want to move that branch to follow this branch. Okay, and do it. So it does it and I went from here to here with just one move operation not having to cut and paste in the first place and not having to figure out where, how to delimit something that structurally is very evident to the machine. There's even commands like transpose, I can transpose words, I can transpose branches, I can transpose statements very easily. Anyways, the idea of carrying this kind of command language on into structures proving very, very valuable for us all the time. Then the other sort of thing of viewing, you've already seen viewing where you say, all right, I like it with numbers or I like it without numbers because the relative indentation tells me what it is structurally and if I add the numbers to it, it just gives a little more exact location so much of the time I'd just as soon work in there because when I move this thing to go after that one I don't really care what, whoops, it was in there for a purpose, see.

	Let's say there are other kinds of adjusting. You notice how the item is now 4, you know with 3 before. Of course it's structure numbers, location numbers change if you change the structure and many times you'd say I would not like to that. There's another way that you can say change the view. I lose track of my cute little cursor, there it is. All sorts of strange things have been happening. Everybody getting says of course that's just something that long during the demo and you say probably yeah, that probably happens to him all the time. One of the data attributes that's on every node is on the serial number and when that node was created it was given a new one and it's kept no matter where you move it. If you print it out you can print out the trace with these statement identifiers, or node identifier numbers and any time later, even it's been rearranged you can go and look at a particular node because that follows it around no matter how much editing you do to it and every time you create a new statement, I'll put a new one in there. See it, it's got the next higher serial number. I delete it and insert another one and it should be 17. The 0 in front of it just avoids any of the confusion about, are you talking about location number along the top level or the serial.

	You've got those things and you can something called a jump, so you can jump and I can jump by pointing and come to that place. I'll say jump return and I'll go back to where I was or I can say jump to an item and give it its SID. There again the key sets, you type the numbers or any special characters you want if you're using ... When you're typing in literals two of these keys are used to sort of case shift, they'll give you 7 bits and if you want to learn the rest of it you'll enter any character you want and it pays off mightily. You can jump by that or you can jump ... I'm going to go back where I was next time I go back I'm going to put on the other numbers. I could say also go to 4 and it'll go to 4, jump return, it goes back. It doesn't matter what number's showing, I can say go to 01O again because it's still, underneath it's still got that SID internal number.

	Another thing that you can do, you can say to, ask any statement, you can say show what we call a name delimiters in that statement. Down underneath some of the attributes again are a pair of characters and all it says is anytime when you're at that statement it gets, those two characters get checked. Then the very first word in that statement is it's delimited by those characters, hash code it and put it in the name table because it has now become an assigned name, a label for that statement. Well down here, VG. Just look at that one and say yes that's got the same colons so VG is the name. I can say jump item to VG and it's going to go to it just as if you'd said jump to 3D or whatever other number it was.

	This kind of addressing, accessible, and there's also all kinds of relative addressing and that paper we handed out outlines all the kinds of addressing that's actually available to you. One kind of think now, if I say ... I'm just inserting something in here. Like I said, I'm saying here's a link. It says address to VG and it's got some view specifications saying what sequence things to do when you get there to view. And it wants to [inaudible 00:45:01] This thing called a link writes some particular passage in any file you want and it says when I get there here's the view. What it types is a view of a given set of objects. What you had in mind when you were talking about it, so it just makes it very flexible to move around. How is the time? Am I reading right, it's 2 minutes after 5? Well, the other 80 percent of what I had ready to show you ...

	A bunch of slides, there's some discussion of a system called a journal and if you take a look at your document that you have here and think of several unique characteristics. In the top left, top right of every page you see OAD comma 2250, comma. There's a journal system, we're given the name OAD, and this was the 2250th item that was submitted to it, and anytime afterwards from now on you ask for that item number and it'll go retrieve this document. No one's had a chance to change it. It's like it was published and you don't have to worry about archiving it, it's all kept you for it and archivable. And further down the right hand column we say let's publish, print, the actual location number because since the document is frozen out there and published no one's going to change it so these are always going to remain valid. That means that anytime you want it you just send a message to someone and said, "Hey, look at branch 6D in OAD 2250 and go there." If you want to get back with me I'll show you what happens. Am I going to get kicked out of here here? Everybody runs over doesn't he? [inaudible 00:46:54]

Male:	[inaudible 00:46:59]

Doug:	And then we'll take questions. Then we'll take roll call. Can I have the, back on the screen? And the lights dimmed? All right. All right. I can just say change the view here like this. What I want to do is break this window and I want to figure out where to break it. I'm going to go, go look at something that counts. It tells me how many lines, why don't you drop down now? You don't have to watch my hands so give me the whole window as being on the screen. Good. Let me just break this about here. [inaudible 00:48:11] Some days it doesn't say.

	I moved that quickly. Oh, I know. The TV's not looking at the whole ...

	All right. Now I ought to be able to break this. Okay. Now I got a small window here and another one right under it. If I go back to the file where I was and hit jump return and let me just ... What'd I say? OAD 2250 6D. If I don't have much room in there I'm going to just say ... OAD 2250 6D we'll just do like that, all right. Great, let's go and see if it's what I see. Bingo, there it is. I'm looking at just the first line of those two paragraphs and if I add, if I say show me the first two lines and put a blank space between them you see it looks like that. I'd say well just draw me everything in this window and it's pretty hard, well come down and look at this and give me a little bit more chance in this size of window to see, okay.

	Anyway, it's just that easy to make a citation to anything prior published in here. Even mail message that comes through, can point to it but if it's in another generalized document and you just have recorded dialogue that goes on it's just extremely powerful and it's hard to realize how much power that gives over just plain that says, yeah, if you looked at my file I had a document that was archived but somebody's keeping track of it. It's like, writing and publishing a paper in which you cite some other paper but you don't know whether the person has access to a library or not so you'd say, well I'm going to have to qualify and add a lot of context and you can get the idea without going look at it. Here you can just point to any passage, not just your document, and say I'm confident that I can look at it so, it's not a book, so in one sentence you can point to this passage and say, hey, this thing's counter to what's specified here but it might be ameliorated by what was set up here in the general policy and just one sentence with 3 links you've just communicated a great deal and it's answered in there and people can find it.

	These journal items are put in and they've got, when you submit it to the journal there's a catalog that keeps track of title and other things like key words and search processes over it so you can go find items by that nature. A big amount of the power comes from the network of links that point on to things like that. I had a whole series of, I've got 8 minutes exactly? I've got a few more minutes? Why don't I show you a few examples of ... well. [inaudible 00:52:04]

	Anyway, this is showing you some mail items and showing you the kinds of explicit data elements that you can use and one this here is that this things is a document destined to go in the journal. It has to, I'm looking at only one line so we see this, kind of go into the Augment Journal which is the oldest of them. It's been running since 1970 and there are 103,000 or more items that have been submitted to that journal. Access in this case in unrestricted and it goes on and tells you the comment that you're talking about and you can go look at author. Who was the author in the matter, who submitted keywords? That supersedes, augments this one, so if you later jump to Augment 101530 it'll automatically tell you, so that's been superseded. Do you want the new one or the old one? If you say jump to link on that and it goes there and it comes out and it says hey, that's not on this host online right now. Do you want it retrieve? All you have to do is click yes and the operator gets an automatic message that says get it off [inaudible 00:53:29] so I'm going to put it on and the message comes back via email saying okay, it's on now.

	It's just a very, very powerful way to operate in the journal. While I'm jumping on links on this list over on the right it's just like having a, having a menu I can just point and go click but really there's just a link in there that moves me over here. It says all right, I got a publications list. That's another one of the journal items, a one page list of publications which is passed out. Incidentally Professor Allison, I'll get him a copy each of those so anyone who's interested in anymore of our publications can get in touch with him. I don't know what he's going to do about it but he said he would do something.

	Anyway, I can go look at the same publication list and I just, I wanted a view that's just the top level, first line and numbers like that. I can scan through that and if you'd work in a larger window of course you'd get more flexibility. If I say jump to the next little example thing I've got in here and that says, oh, go to that authorship entry and look at the whole statement. There it goes to the entry, that's the entry in there for the other paper I handed out before link 1, so it's a bibliographic entry in that one so great. At the end of that, and I got kicked off, unfortunately. Let's just see if ...

	Yeah, there it is. It shows a journal number down at the end. OAD 2250 down in the bottom, [inaudible 00:55:19] 220. Every item that 20 has a journal item, the later ones when we had the journal working and could get in. Let's go to the next example statement that says, oh, you want to go through this entry list. Here's the thing about the links, addressedly. It says go to this [inaudible 00:55:38] 1968 which is this journal item that has the list. Then it says go to item 20 on it. Then that period L says, oh, and when you get to 20 take the link and follow it. It's going to go down and take this link, OAD 2250 and then the [inaudible 00:55:55] says when you get there go to the top and look for number 1. It's going to go to the first statement and give you an overview. It's an indirect addressing scheme.

	This indirection of linkage following around is something that can be very powerful if you want to do it [inaudible 00:56:09] there and looking at the top level of this document that I gave you like that. In the journal, like sitting at a library, I'd make a copy whether or pilot thing, I can very quickly copy from it or do what I wish but that I know is the original that was put. If I want to just try something I'll say oh, among the things that's stored down in the attributes [inaudible 00:56:34] list in there is the name, the identity of the last person that changed it and the date and time that it was edited. See, those things really were put together in December of '83.

	I was going to, someplace there look at a little bit of source code and that's really interesting. All the source code for Augment is stored like this and this kind of flexibility for bombing around gives you a lot of power and anytime you want to you can see which who edited this last. It's very interesting. [inaudible 00:57:09] Some of it goes back, is dated about '70, '71, doesn't it? It's still ...

	Okay, let's look at the next example. This goes there directly. Now I got myself in trouble. Let's look at that same statement in this window and see it says, go directly to OAD 2250 and go to item 7. That's the view control one. I'll say all right, go to item 7 and I want to look at just the first few levels under there. You tell somebody, oh, you should look up business about controlling the view, here's the citation. Then this person's in there and he can wander around and look at the rest of the system if he wants.

	Anyway. Here's another one. In our user guide there's something called a locator and so you just go look at that locator. The locator has a bunch of other things, you'd say, oh, augment 2 of the features. What's that? Go look, open up another level. That system's utilities, features, what about features? I'll go look at that, command sequences. What if I look at command sequences? Then you're there. This is just using the ordinary basic capability to Augment but giving you a hierarchical classification system which falls out of the [inaudible 00:58:27] Over and over again those basic characteristics prove to be valuable.

	One thing that you see hidden down here is documents, see. All right, you've got, so there's a link off to where you find the documentation for all the documentation that's stored online and is findable through this locator like that. And so I just go through them all, except I promised to quit wasting time. I was going to show you source code which would be-

Dr. Allison:	Why don't you take a few questions and remind everyone to use their microphone?

Questioner 1:	Have you tried to apply conventional information retrieval algorithms to some of these very large text files that you just want to find an individual key word, have you tried a bunch of those sort of techniques to identify information when you don't remember the citation or the link?

Doug:	We have some various scanning, you can jump to words. Part of our architecture is there's a sequence generator that hands it to a compiler or a printer or a printer or a display generator, a sequence of node data. You've got options of flipping in a different sequence generator if you want. One of the standard options is you can say as you're getting the candidate and the view specification says how deep into the hierarchy you want to go?

	As you're getting these candidates apply this scan to it and if it doesn't pass go on to the next and don't hand along the pass so that kind of functioning shows up on your screen and you can write a little scanning program for, as statistical as you want to. There's simple ones that you can just get compiled and executed right on the spot or you can write a whole program and flip it in there [inaudible 01:00:17] That's one kind of thing but it's not as efficient as you'd like. Then I've made those that will go through and you can make a complex scanning pattern and tell it to [inaudible 01:00:28] with the documents you want it to go through and go off and run and I tell it who I want to put the hit list. What it does with the hit list is extract passages from a hit statement and a link off to it. You come back later and look at that and put that in the window and just go look at the things. One of the things I would hope for of course is that we'd get a community of users that would include people who were really interested in these different aspects and they can start using that kind of technique.

	Another aspect is that the architecture and this modular flexibility and interface thing is built so that it would be very easy to slip in smart AI module in there to do all kinds of different task for the user community. This is always assume you do that. There' some chance that a lot of this will pick up some momentum again in the next year because among large corporations that are finding a lot of these architectural and document and linkage and all that characteristics are going to be very important and there isn't any other prototype that's got all these things wrapped up and even if it is sitting on very old machinery and you've got source code in it that's got 1970 dates it's still the only thing in existence that embodies a lot of that and is a very good pilot. There's some chance to do that and also they're trying a way, the stuff about porting it over and doing it with sort of more up-to-date interfaces than some of the standards that exist now and just make an integrated merge. It's exciting that that may happen because it's been very frustrating through the years, how things get popular and when first the market comes out and everybody's got a personal computer. Everyone's so excited and it [inaudible 01:02:15] that you can't really tell them about the things that aren't right in front of them, like even you guys might even remember ...

	All of us humans are like that so it just, the world's changing now and it's exciting to see about the integration of a lot of that potential. I'll make shorter questions. If they give me shorter questions I'll make shorter answers.

Student  2:	You might also pointing out that you're running over a telephone line, 2400 [inaudible 01:03:53].

Doug:	Oh, yeah. There's a lot of things designed in that to minimize the amount of information having to be sent back and so all the windowing, there's a lot of things, lots of things built into that that would be fun to, it'd take hours and hours and hours to show you the different basic things that were built in that, many of them are so unique.

Questioner 2:	The Mac that you have been using on your left, on your left.

Doug:	That's, my key set?

Questioner 2:	Is that a replacement of the keyboard sort of speaking because I've noticed you have been entering all the commands with that rather than the mouse and I guess my [inaudible 01:04:41] that has the three buttons on your right hand side.

Doug:	Well, the roll of this is that it's an alternative or optional replacement of this when it's more useful. If you're typing straight text this is considerably faster. This is actually easier to learn, by quite a bit. 30 words a minute and you're hammering pretty hard. I actually was doing this one time, I had put one on each hand, I'd go faster. But anyway, it's for saying if this hand is busy pointing why not give it a chance to do something here and so instead of picking an object and then picking what you want to do about it you're saying what you want to do while you're on your way to picking the object and you're doing things in parallel that otherwise would be in tandem and you're employing both hands and you've got your eyes on the screen and that combination just starts making it really fly. You shift over to this, some people shift if they've got more than 2 characters in a row to type and some wait until it's 8 or 9. Does that help you?

Questioner 2:	Yes, it did. Also one other question from me. I'm sorry, I don't know your last name. The gentleman mentioned about that this was available through a telephone line, through some sort of database or some network or something. Would that be, and you mentioned about the community of users that would be able to, what information besides that the hand out that you handed us, what other information that are available for us to ...

Doug:	I guess we can't get commercial here. That's been available for many years as a sort of subscription service over Tymnet or ARPANET. The qualified ARPANET users can get at it that way, over Tymnet. Instead of buy it by the resource time or by the fractions of the machine that you get on, but it's been kind of a specialized small business off to the side and they couldn't, the overhead of dealing with lots of small customers beat them so they kind of aren't really looking for that so try to get larger organizations and sell it by bulk.

Questioner 2:	How could schools use [inaudible 01:07:15]

Doug:	I would just love to get it moved in and there's some chance that we could start unlocking that and find a way to subsidize a little bit and get it in because you've just-

Questioner 2:	Perhaps they are available for the learning center or something for students to just go in and check [inaudible 01:07:29]

Doug:	It only runs on a deck 20. It's not exactly the most modern equipment. Transporting it is roughly estimated as very expensive and people laughed for quite a while but now it made me realize that because it is a very unique, large combination of things that, the assemblage of them has a lot of synergy among them all. The journal is very powerful because of the links and many of the other things add up.

Questioner 2:	Thank you.

Questioner 3:	Is source code available for the 20? Can we port it to our machine?

Doug:	March it's coming out proprietary, source code available, well it's a propriety thing sold by McDonnell Douglas' Information Systems Group. I'd really like to unlock and open its current version up and get it public and get a lot of dialogue going while the proprietary oriented people start re-specifying what they do to go and modernize it all. There's a lot of very valuable experience that could be ... [inaudible 01:08:33]

Questioner 3:	Thank you guys.

Doug:	[inaudible 01:08:35] That worked for us way back in the early '60s.

Questioner 4:	3 short questions, Doug. 1 is, what is Augment written in now? Secondly, would things have been different if Pascal and Modular-2 were available in '65, and the third thing is would you just comment on Guide and how close you think it comes to hypertext or what you might want to see in things?

Doug:	Written in a language called [inaudible 01:09:04] that evolved through stages of, when we had about our third machine we moved to in 1968 was an early time sharing system that had only a very bad FORTRAN and we were already beyond where assembly language was easy to manage. That FORTRAN was too horrible to contemplate so [inaudible 01:09:27] was here and [inaudible 01:09:32] was excited about machine oriented compilers so we built one of those and it evolved with some meta-compiler compiler. The language now with more flexibility than C but not typing and such, the module and all that. If it were transported I'm not sure. And Guide I haven't tried.

Questioner 5:	I'm just wondering if you mentioned access to documents. I'm interesting in conference editing sessions. Have you dealt with the problems involved with multiple users wanting to access and edit simultaneously documents or collaborating on the editing of an individual document?

Doug:	Yeah. We got down once to looking at the actual locking and unlocking of individual statements to say, could that go on and you'd be editing one statement and I'd be editing another. There was some trial designs made of that but it was never carried through but it'd be possible to isolate the different parts and even have privacy or access locks on individual nodes in there. There's enough space for the data in there.

	The thing we do in sharing though, a lot, is you can make your comments off with links pointing to passages so this gives you a very powerful way to line up a couple windows and go see what so and so said he wanted to do. Somebody else doing it. Or if you wanted to we used a shared screen mode where we could get 2 to 4 people all shared, wherever they are in the country, talking on a conference phone call, looking at the same thing. I can pass controls over to you so you see how you'd like the make a change and we all argue about it. [inaudible 01:11:21] I'll set it like it ought to be. It had those things going but there are many pathways of exploring, and we just had to truncate most all of them because there's always only so much you can do at any given stage and we follow any one path for, sort of, [inaudible 01:11:43] diminishing returns. There's many, many things that are, very interesting exploratory things to do with the system the way it is and many things would be easy to add to this system that open up other power. Now, that's the real answer.

Radio:	KKCY. Predictably unpredictable. 989FM. The city.

